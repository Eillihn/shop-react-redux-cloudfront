service: aws-boardgames-shop

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  # setup profile for AWS CLI.
  # profile: node-aws

plugins:
  - serverless-finch
  # 'serverless-single-page-app-plugin' is a custom plugin that located .serverless_plugins folder.
  # Existing plugin (https://www.npmjs.com/package/serverless-single-page-app-plugin) doesn't have invalidate cache feature that often used during CI/CD events.
  # How to build your own plugins: https://www.serverless.com/framework/docs/providers/aws/guide/plugins#service-local-plugin
  - serverless-single-page-app-plugin
  - serverless-s3-cleaner
  - serverless-export-outputs

custom:
  client:
    bucketName: ${self:service}
    distributionFolder: dist
  s3BucketName: ${self:custom.client.bucketName}

  ## Serverless-single-page-app-plugin configuration:
  s3LocalPath: ${self:custom.client.distributionFolder}/
  serverless-s3-cleaner:
    buckets:
      - ${self:custom.client.bucketName}

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        ### No more AccessControl
        # AccessControl: PublicRead
        ###  replace it with...
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        # VersioningConfiguration:
        #   Status: Enabled

    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: 'AllowCloudFrontAccessIdentity'
              Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
              Principal:
                AWS:
                  Fn::Join:
                    - ' '
                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                      - !Ref OriginAccessIdentity

    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Access identity between CloudFront and S3 bucket

    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
              ## An identifier for the origin which must be unique within the distribution
              Id: myS3Origin
              ## In case you don't want to restrict the bucket access use CustomOriginConfig and remove S3OriginConfig
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
              # CustomOriginConfig:
              #   HTTPPort: 80
              #   HTTPSPort: 443
              #   OriginProtocolPolicy: https-only
          Enabled: true
          IPV6Enabled: true
          HttpVersion: http2
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD', 'OPTIONS']
            ForwardedValues:
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Authorization
              ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
              QueryString: false
              Cookies:
                Forward: none
            ## The origin id defined above
            TargetOriginId: myS3Origin
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            DefaultTTL: 0
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    ProductsServiceLambdaAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ProductsServiceLambdaAccessRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/AmazonSNSFullAccess
          - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        Policies:
          - PolicyName: GetProductsListLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:us-east-1:154716314884:table/Products
                    - arn:aws:dynamodb:us-east-1:154716314884:table/Stocks
          - PolicyName: LambdaBasicExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:us-east-1:154716314884:log-group:/aws/lambda/${self:service}-dev-createProduct:*
                    - arn:aws:logs:us-east-1:154716314884:log-group:/aws/lambda/${self:service}-dev-getProductsById:*
                    - arn:aws:logs:us-east-1:154716314884:log-group:/aws/lambda/${self:service}-dev-getProductsList:*
                    - arn:aws:logs:us-east-1:154716314884:log-group:/aws/lambda/${self:service}-dev-catalogBatchProcess:*
    CatalogItemsQueue:
      Type: 'AWS::SQS::Queue'
    CatalogItemsQueueEventSourceMapping:
      Type: 'AWS::Lambda::EventSourceMapping'
      Properties:
        BatchSize: 5
        EventSourceArn: !GetAtt CatalogItemsQueue.Arn
        FunctionName: !GetAtt CatalogBatchProcessLambdaFunction.Arn
    CreateProductTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: CreateProductTopicName
    CreateProductTopicSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: 'email'
        TopicArn: !Ref CreateProductTopic
        Endpoint: 'hanna_svirskaya@epam.com'

  #    ProductsTable:
  #      Type: AWS::DynamoDB::Table
  #      Properties:
  #        TableName: Products
  #        AttributeDefinitions:
  #          - AttributeName: id
  #            AttributeType: N
  #        KeySchema:
  #          - AttributeName: id
  #            KeyType: HASH
  #        ProvisionedThroughput:
  #          ReadCapacityUnits: 5
  #          WriteCapacityUnits: 5
  #    StocksTable:
  #      Type: AWS::DynamoDB::Table
  #      Properties:
  #        TableName: Stocks
  #        AttributeDefinitions:
  #          - AttributeName: product_id
  #            AttributeType: N
  #        KeySchema:
  #          - AttributeName: product_id
  #            KeyType: HASH
  #        ProvisionedThroughput:
  #          ReadCapacityUnits: 5
  #          WriteCapacityUnits: 5

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value: !Ref WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value: !GetAtt WebAppCloudFrontDistribution.DomainName
    CatalogItemsQueueUrl:
      Description: 'SQS Queue URL'
      Value: !GetAtt CatalogItemsQueue.QueueUrl
      Export:
        Name: CatalogItemsQueueUrl

functions:
  createProduct:
    handler: service/product/createProduct.handler
    role: ProductsServiceLambdaAccessRole
    environment:
      PRODUCTS_TABLE_NAME: Products
      STOCKS_TABLE_NAME: Stocks
    events:
      - http:
          path: products
          method: post
          cors: true
  getProductsList:
    handler: service/product/getProductsList.handler
    role: ProductsServiceLambdaAccessRole
    environment:
      PRODUCTS_TABLE_NAME: Products
      STOCKS_TABLE_NAME: Stocks
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsById:
    handler: service/product/getProductsById.handler
    role: ProductsServiceLambdaAccessRole
    environment:
      PRODUCTS_TABLE_NAME: Products
      STOCKS_TABLE_NAME: Stocks
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  catalogBatchProcess:
    handler: service/product/catalogBatchProcess.handler
    role: ProductsServiceLambdaAccessRole
    events:
      - sqs:
          arn: !GetAtt CatalogItemsQueue.Arn
    environment:
      SNS_TOPIC_ARN: !Ref CreateProductTopic
      CATALOG_ITEMS_QUEUE_URL: !GetAtt CatalogItemsQueue.QueueUrl
